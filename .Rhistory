sheet_info_19 <- gs4_get(sheet_url_19)
## next: 2019
sheet_url_19 <- "https://docs.google.com/spreadsheets/d/1O4tB-IDLZUqP1I2ECJ9JnBOEDbQEoOwNLbbcBjrV4Tk/edit?usp=sharing"
sheet_info_19 <- gs4_get(sheet_url_19)
tabs_all_19 <-
sheet_info_19$sheets %>%
subset(name != "template")
rm(list=ls())
library(tidyverse)
library(googlesheets4)
## ggplot theme
windowsFonts(Arial=windowsFont("TT Arial"))
theme_scz <- function(...){
theme_bw(base_size=10, base_family="Arial") +
theme(
text=element_text(color="black"),
plot.title=element_text(face="bold", size=rel(1)),
axis.title=element_text(face="bold", size=rel(1)),
axis.text=element_text(size=rel(1)),
strip.text=element_text(size=rel(1)),
legend.title=element_text(face="bold", size=rel(1)),
legend.text=element_text(size=rel(1)),
panel.grid=element_blank(),
plot.margin=unit(c(1,1,1,1), "mm"),
strip.background=element_blank())
}
theme_set(theme_scz())
# deauthorize - no need to write or read private sheets
gs4_deauth()
## first: do 2020
sheet_url <- "https://docs.google.com/spreadsheets/d/1I4kUeZEEtup1e7Wd3PSqfBpaHyK6ntcL18Dz2zYSCfs/edit#gid=1890047702"
sheet_info <- gs4_get(sheet_url)
tabs_all <-
sheet_info$sheets %>%
subset(name != "template")
for (w in 1:length(tabs_all$name)){
# figure out when this week starts
week_start_date <- lubridate::mdy(tabs_all$name[w])
# read google sheet
data <- read_sheet(sheet_url, sheet = tabs_all$name[w], range = "A3:H38", col_types = "cccccccc")
daytype <- read_sheet(sheet_url, sheet = tabs_all$name[w], range = "B2:H2",
col_names = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# transform to long-form and combine
daytype_long <-
tibble::tibble(Day = colnames(daytype),
Daytype = c(as.character(daytype[1,])))
data_long <-
reshape2::melt(data, id = "Time", value.name = "Activity", variable.name = "Day")
week_summary <-
dplyr::left_join(data_long, daytype_long, by = "Day") %>%
replace_na(list("Activity" = "Not Work")) %>%
dplyr::mutate(week_start_date = week_start_date)
if (w == 1){
all_weeks <- week_summary
} else {
all_weeks <-
dplyr::bind_rows(week_summary, all_weeks)
}
}
Sys.sleep(5)
rm(list=ls())
library(tidyverse)
library(googlesheets4)
## ggplot theme
windowsFonts(Arial=windowsFont("TT Arial"))
theme_scz <- function(...){
theme_bw(base_size=10, base_family="Arial") +
theme(
text=element_text(color="black"),
plot.title=element_text(face="bold", size=rel(1)),
axis.title=element_text(face="bold", size=rel(1)),
axis.text=element_text(size=rel(1)),
strip.text=element_text(size=rel(1)),
legend.title=element_text(face="bold", size=rel(1)),
legend.text=element_text(size=rel(1)),
panel.grid=element_blank(),
plot.margin=unit(c(1,1,1,1), "mm"),
strip.background=element_blank())
}
theme_set(theme_scz())
# deauthorize - no need to write or read private sheets
gs4_deauth()
## first: do 2020
sheet_url <- "https://docs.google.com/spreadsheets/d/1I4kUeZEEtup1e7Wd3PSqfBpaHyK6ntcL18Dz2zYSCfs/edit#gid=1890047702"
sheet_info <- gs4_get(sheet_url)
tabs_all <-
sheet_info$sheets %>%
subset(name != "template")
for (w in 1:length(tabs_all$name)){
# figure out when this week starts
week_start_date <- lubridate::mdy(tabs_all$name[w])
# read google sheet
data <- read_sheet(sheet_url, sheet = tabs_all$name[w], range = "A3:H38", col_types = "cccccccc")
daytype <- read_sheet(sheet_url, sheet = tabs_all$name[w], range = "B2:H2",
col_names = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# transform to long-form and combine
daytype_long <-
tibble::tibble(Day = colnames(daytype),
Daytype = c(as.character(daytype[1,])))
data_long <-
reshape2::melt(data, id = "Time", value.name = "Activity", variable.name = "Day")
week_summary <-
dplyr::left_join(data_long, daytype_long, by = "Day") %>%
replace_na(list("Activity" = "Not Work")) %>%
dplyr::mutate(week_start_date = week_start_date)
if (w == 1){
all_weeks <- week_summary
} else {
all_weeks <-
dplyr::bind_rows(week_summary, all_weeks)
}
# pause to avoid rate limit
Sys.sleep(5)
}
## next: 2019
sheet_url_19 <- "https://docs.google.com/spreadsheets/d/1O4tB-IDLZUqP1I2ECJ9JnBOEDbQEoOwNLbbcBjrV4Tk/edit?usp=sharing"
sheet_info_19 <- gs4_get(sheet_url_19)
tabs_all_19 <-
sheet_info_19$sheets %>%
subset(name != "template")
for (w in 1:length(tabs_all_19$name)){
# figure out when this week starts
week_start_date <- lubridate::mdy(tabs_all_19$name[w])
# read google sheet
data <- read_sheet(sheet_url_19, sheet = tabs_all_19$name[w], range = "A3:H38", col_types = "cccccccc")
daytype <- read_sheet(sheet_url_19, sheet = tabs_all_19$name[w], range = "B2:H2",
col_names = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# transform to long-form and combine
daytype_long <-
tibble::tibble(Day = colnames(daytype),
Daytype = c(as.character(daytype[1,])))
data_long <-
reshape2::melt(data, id = "Time", value.name = "Activity", variable.name = "Day")
week_summary <-
dplyr::left_join(data_long, daytype_long, by = "Day") %>%
replace_na(list("Activity" = "Not Work")) %>%
dplyr::mutate(week_start_date = week_start_date)
all_weeks <-
dplyr::bind_rows(week_summary, all_weeks)
Sys.sleep(5)
}
?write_csv
write_csv(all_weeks, "WorkTimeAnalysis_Hours_2020.csv")
head(all_weeks)
min(all_weeks$week_start_date)
all_weeks <- subset(all_weeks, lubridate::year(week_start_date) >= 2020)
min(all_weeks$week_start_date)
write_csv(all_weeks, "WorkTimeAnalysis_Hours_2020.csv")
## next: 2019
sheet_url_19 <- "https://docs.google.com/spreadsheets/d/1O4tB-IDLZUqP1I2ECJ9JnBOEDbQEoOwNLbbcBjrV4Tk/edit?usp=sharing"
sheet_info_19 <- gs4_get(sheet_url_19)
tabs_all_19 <-
sheet_info_19$sheets %>%
subset(name != "template")
for (w in 1:length(tabs_all_19$name)){
# figure out when this week starts
week_start_date <- lubridate::mdy(tabs_all_19$name[w])
# read google sheet
data <- read_sheet(sheet_url_19, sheet = tabs_all_19$name[w], range = "A3:H38", col_types = "cccccccc")
daytype <- read_sheet(sheet_url_19, sheet = tabs_all_19$name[w], range = "B2:H2",
col_names = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# transform to long-form and combine
daytype_long <-
tibble::tibble(Day = colnames(daytype),
Daytype = c(as.character(daytype[1,])))
data_long <-
reshape2::melt(data, id = "Time", value.name = "Activity", variable.name = "Day")
week_summary <-
dplyr::left_join(data_long, daytype_long, by = "Day") %>%
replace_na(list("Activity" = "Not Work")) %>%
dplyr::mutate(week_start_date = week_start_date)
if (w == 1){
all_weeks_19 <- week_summary
} else {
all_weeks_19 <-
dplyr::bind_rows(week_summary, all_weeks_19)
}
Sys.sleep(5)
}
all_weeks_19 <- read_csv("WorkTimeAnalysis_Hours_2019-temp.csv")
library(tidyverse)
library(googlesheets4)
all_weeks_19 <- read_csv("WorkTimeAnalysis_Hours_2019-temp.csv")
## ggplot theme
windowsFonts(Arial=windowsFont("TT Arial"))
theme_scz <- function(...){
theme_bw(base_size=10, base_family="Arial") +
theme(
text=element_text(color="black"),
plot.title=element_text(face="bold", size=rel(1)),
axis.title=element_text(face="bold", size=rel(1)),
axis.text=element_text(size=rel(1)),
strip.text=element_text(size=rel(1)),
legend.title=element_text(face="bold", size=rel(1)),
legend.text=element_text(size=rel(1)),
panel.grid=element_blank(),
plot.margin=unit(c(1,1,1,1), "mm"),
strip.background=element_blank())
}
theme_set(theme_scz())
# deauthorize - no need to write or read private sheets
gs4_deauth()
## next: 2019
sheet_url_19 <- "https://docs.google.com/spreadsheets/d/1O4tB-IDLZUqP1I2ECJ9JnBOEDbQEoOwNLbbcBjrV4Tk/edit?usp=sharing"
sheet_info_19 <- gs4_get(sheet_url_19)
tabs_all_19 <-
sheet_info_19$sheets %>%
subset(name != "template")
for (w in 45:length(tabs_all_19$name)){
# figure out when this week starts
week_start_date <- lubridate::mdy(tabs_all_19$name[w])
# read google sheet
data <- read_sheet(sheet_url_19, sheet = tabs_all_19$name[w], range = "A3:H38", col_types = "cccccccc")
daytype <- read_sheet(sheet_url_19, sheet = tabs_all_19$name[w], range = "B2:H2",
col_names = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# transform to long-form and combine
daytype_long <-
tibble::tibble(Day = colnames(daytype),
Daytype = c(as.character(daytype[1,])))
data_long <-
reshape2::melt(data, id = "Time", value.name = "Activity", variable.name = "Day")
week_summary <-
dplyr::left_join(data_long, daytype_long, by = "Day") %>%
replace_na(list("Activity" = "Not Work")) %>%
dplyr::mutate(week_start_date = week_start_date)
if (w == 1){
all_weeks_19 <- week_summary
} else {
all_weeks_19 <-
dplyr::bind_rows(week_summary, all_weeks_19)
}
Sys.sleep(8)
}
View(all_weeks_19)
all_weeks_19 <- read_csv("WorkTimeAnalysis_Hours_2019-temp.csv")
w <- 45
# figure out when this week starts
week_start_date <- lubridate::mdy(tabs_all_19$name[w])
# read google sheet
data <- read_sheet(sheet_url_19, sheet = tabs_all_19$name[w], range = "A3:H38", col_types = "cccccccc")
View(data)
daytype <- read_sheet(sheet_url_19, sheet = tabs_all_19$name[w], range = "B2:H2",
col_names = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# transform to long-form and combine
daytype_long <-
tibble::tibble(Day = colnames(daytype),
Daytype = c(as.character(daytype[1,])))
data_long <-
reshape2::melt(data, id = "Time", value.name = "Activity", variable.name = "Day")
View(data_long)
week_summary <-
dplyr::left_join(data_long, daytype_long, by = "Day") %>%
replace_na(list("Activity" = "Not Work")) %>%
dplyr::mutate(week_start_date = week_start_date)
View(week_summary)
class(all_weeks$Time)
class(all_weeks_19$Time)
View(all_weeks_19)
?read_csv
all_weeks_19 <- read_csv("WorkTimeAnalysis_Hours_2019-temp.csv", col_types = "ccccT")
View(all_weeks_19)
if (w == 1){
all_weeks_19 <- week_summary
} else {
all_weeks_19 <-
dplyr::bind_rows(week_summary, all_weeks_19)
}
View(all_weeks_19)
for (w in 46:length(tabs_all_19$name)){
# figure out when this week starts
week_start_date <- lubridate::mdy(tabs_all_19$name[w])
# read google sheet
data <- read_sheet(sheet_url_19, sheet = tabs_all_19$name[w], range = "A3:H38", col_types = "cccccccc")
daytype <- read_sheet(sheet_url_19, sheet = tabs_all_19$name[w], range = "B2:H2",
col_names = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# transform to long-form and combine
daytype_long <-
tibble::tibble(Day = colnames(daytype),
Daytype = c(as.character(daytype[1,])))
data_long <-
reshape2::melt(data, id = "Time", value.name = "Activity", variable.name = "Day")
week_summary <-
dplyr::left_join(data_long, daytype_long, by = "Day") %>%
replace_na(list("Activity" = "Not Work")) %>%
dplyr::mutate(week_start_date = week_start_date)
if (w == 1){
all_weeks_19 <- week_summary
} else {
all_weeks_19 <-
dplyr::bind_rows(week_summary, all_weeks_19)
}
Sys.sleep(8)
}
View(all_weeks_19)
write_csv(all_weeks_19, "WorkTimeAnalysis_Hours_2019.csv")
library(tidyverse)
## load output from WorkTimeAnalysis_CollectData.R
all_weeks_19 <- read_csv("WorkTimeAnalysis_Hours_2019.csv")
all_weeks_20 <- read_csv("WorkTimeAnalysis_Hours_2020.csv")
View(all_weeks_19)
View(all_weeks_20)
# combine into single data frame
all_weeks <- dplyr::bind_rows(all_weeks_19, all_weeks_20)
## set Day factors
all_weeks$Day <- factor(all_weeks$Day, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
## daily hours worked plots
daily_hrs <-
all_weeks %>%
dplyr::group_by(week_start_date, Day, Daytype) %>%
dplyr::summarize(hours_worked = sum(Activity != "Not Work")*0.5) %>%
dplyr::mutate(hours_worked_cut = cut(hours_worked, c(0, 0.25, 2, 6, 9, 24), include.lowest = T,
labels = c("0", "0.5 - 2", "2.5 - 6", "6.5 - 9", "> 9.5")))
hrs_per_workday <- sum(daily_hrs$hours_worked)/sum(daily_hrs$Daytype %in% c("work", "conference"))
ggplot(daily_hrs, aes(x = Day, y = week_start_date, fill = hours_worked)) +
geom_raster()
ggplot(daily_hrs, aes(x = Day, y = week_start_date, fill = hours_worked_cut)) +
geom_raster() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_date(name = "Week", expand = c(0, 0)) +
scale_fill_manual(name = "Daily Hours Worked",
values = c("gray65", "#ffffb2", "#fecc5c", "#fd8d3c", "#e31a1c"))
class(daily_hrs$week_start_date)
View(all_weeks)
## load output from WorkTimeAnalysis_CollectData.R
all_weeks_19 <- read_csv("WorkTimeAnalysis_Hours_2019.csv", col_types = "ccccT")
all_weeks_20 <- read_csv("WorkTimeAnalysis_Hours_2020.csv", col_types = "ccccT")
# combine into single data frame
all_weeks <- dplyr::bind_rows(all_weeks_19, all_weeks_20)
## set Day factors
all_weeks$Day <- factor(all_weeks$Day, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
## daily hours worked plots
daily_hrs <-
all_weeks %>%
dplyr::group_by(week_start_date, Day, Daytype) %>%
dplyr::summarize(hours_worked = sum(Activity != "Not Work")*0.5) %>%
dplyr::mutate(hours_worked_cut = cut(hours_worked, c(0, 0.25, 2, 6, 9, 24), include.lowest = T,
labels = c("0", "0.5 - 2", "2.5 - 6", "6.5 - 9", "> 9.5")))
hrs_per_workday <- sum(daily_hrs$hours_worked)/sum(daily_hrs$Daytype %in% c("work", "conference"))
ggplot(daily_hrs, aes(x = Day, y = week_start_date, fill = hours_worked_cut)) +
geom_raster() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_date(name = "Week", expand = c(0, 0)) +
scale_fill_manual(name = "Daily Hours Worked",
values = c("gray65", "#ffffb2", "#fecc5c", "#fd8d3c", "#e31a1c"))
ggplot(daily_hrs, aes(x = Day, y = week_start_date, fill = hours_worked_cut)) +
geom_raster() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_datetime(name = "Week", expand = c(0, 0)) +
scale_fill_manual(name = "Daily Hours Worked",
values = c("gray65", "#ffffb2", "#fecc5c", "#fd8d3c", "#e31a1c"))
ggplot(daily_hrs, aes(x = hours_worked, fill = hours_worked_cut)) +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(name = "Daily Hours Worked", expand = c(0, 0)) +
scale_y_continuous(name = "Number of Days") +
scale_fill_manual(name = "Daily Hours Worked",
values = c("gray65", "#ffffb2", "#fecc5c", "#fd8d3c", "#e31a1c")) +
theme(legend.position = c(0, 1),
legend.justification = c(0, 1),
legend.background = element_blank())
## ggplot theme
windowsFonts(Arial=windowsFont("TT Arial"))
theme_scz <- function(...){
theme_bw(base_size=10, base_family="Arial") +
theme(
text=element_text(color="black"),
plot.title=element_text(face="bold", size=rel(1)),
axis.title=element_text(face="bold", size=rel(1)),
axis.text=element_text(size=rel(1)),
strip.text=element_text(size=rel(1)),
legend.title=element_text(face="bold", size=rel(1)),
legend.text=element_text(size=rel(1)),
panel.grid=element_blank(),
plot.margin=unit(c(1,1,1,1), "mm"),
strip.background=element_blank())
}
theme_set(theme_scz())
ggplot(daily_hrs, aes(x = hours_worked, fill = hours_worked_cut)) +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(name = "Daily Hours Worked", expand = c(0, 0)) +
scale_y_continuous(name = "Number of Days") +
scale_fill_manual(name = "Daily Hours Worked",
values = c("gray65", "#ffffb2", "#fecc5c", "#fd8d3c", "#e31a1c")) +
theme(legend.position = c(0, 1),
legend.justification = c(0, 1),
legend.background = element_blank())
## weekly hours worked plots
weekly_hrs <-
all_weeks %>%
dplyr::group_by(week_start_date) %>%
dplyr::summarize(hours_worked = sum(Activity != "Not Work")*0.5)
min(weekly_hrs$hours_worked)
max(weekly_hrs$hours_worked)
mean(weekly_hrs$hours_worked)
median(weekly_hrs$hours_worked)
ggplot(weekly_hrs, aes(x = hours_worked)) +
geom_histogram(breaks = seq(20, 80, 2.5)) +
scale_x_continuous(name = "Weekly Hours Worked", expand = c(0, 0)) +
scale_y_continuous(name = "Number of Weeks")
## weekly hours by activity
weekly_hrs_activity <-
all_weeks %>%
subset(Activity != "Not Work") %>%
dplyr::group_by(week_start_date, Activity) %>%
dplyr::summarize(hours_worked = n()*0.5)
ggplot(weekly_hrs_activity, aes(x = week_start_date, y = hours_worked, fill = Activity)) +
geom_col() +
geom_hline(yintercept = 40, color = "gray65")
## total hours by activity
activity_hrs <-
all_weeks %>%
subset(Activity != "Not Work") %>%
dplyr::group_by(Activity) %>%
dplyr::summarize(hours_worked = n()*0.5)
ggplot(activity_hrs, aes(x = 1, y = hours_worked, fill = Activity)) +
geom_col() +
scale_y_continuous(name = "Total Hours Worked", expand = c(0, 0)) +
scale_x_discrete(name = NULL)
## typical work day
weekday_hours <-
all_weeks %>%
subset(Daytype = "work") %>%
subset(Activity != "Not Work") %>%
dplyr::group_by(Time) %>%
dplyr::summarize(hours_worked = n()*0.5)
ggplot(weekday_hours, aes(x = 1, y = Time, fill = hours_worked)) +
geom_raster()
# combine into single data frame
all_weeks <- dplyr::bind_rows(all_weeks_19, all_weeks_20) %>%
subset(Time != NA)
# combine into single data frame
all_weeks <- dplyr::bind_rows(all_weeks_19, all_weeks_20) %>%
subset(!is.na(Time))
## set Day factors
all_weeks$Day <- factor(all_weeks$Day, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
## daily hours worked plots
daily_hrs <-
all_weeks %>%
dplyr::group_by(week_start_date, Day, Daytype) %>%
dplyr::summarize(hours_worked = sum(Activity != "Not Work")*0.5) %>%
dplyr::mutate(hours_worked_cut = cut(hours_worked, c(0, 0.25, 2, 6, 9, 24), include.lowest = T,
labels = c("0", "0.5 - 2", "2.5 - 6", "6.5 - 9", "> 9.5")))
hrs_per_workday <- sum(daily_hrs$hours_worked)/sum(daily_hrs$Daytype %in% c("work", "conference"))
ggplot(daily_hrs, aes(x = Day, y = week_start_date, fill = hours_worked)) +
geom_raster()
ggplot(daily_hrs, aes(x = Day, y = week_start_date, fill = hours_worked_cut)) +
geom_raster() +
scale_x_discrete(expand = c(0, 0)) +
scale_y_datetime(name = "Week", expand = c(0, 0)) +
scale_fill_manual(name = "Daily Hours Worked",
values = c("gray65", "#ffffb2", "#fecc5c", "#fd8d3c", "#e31a1c"))
ggplot(daily_hrs, aes(x = hours_worked, fill = hours_worked_cut)) +
geom_histogram(binwidth = 0.5) +
scale_x_continuous(name = "Daily Hours Worked", expand = c(0, 0)) +
scale_y_continuous(name = "Number of Days") +
scale_fill_manual(name = "Daily Hours Worked",
values = c("gray65", "#ffffb2", "#fecc5c", "#fd8d3c", "#e31a1c")) +
theme(legend.position = c(0, 1),
legend.justification = c(0, 1),
legend.background = element_blank())
## weekly hours worked plots
weekly_hrs <-
all_weeks %>%
dplyr::group_by(week_start_date) %>%
dplyr::summarize(hours_worked = sum(Activity != "Not Work")*0.5)
ggplot(weekly_hrs, aes(x = hours_worked)) +
geom_histogram(breaks = seq(20, 80, 2.5)) +
scale_x_continuous(name = "Weekly Hours Worked", expand = c(0, 0)) +
scale_y_continuous(name = "Number of Weeks")
## weekly hours by activity
weekly_hrs_activity <-
all_weeks %>%
subset(Activity != "Not Work") %>%
dplyr::group_by(week_start_date, Activity) %>%
dplyr::summarize(hours_worked = n()*0.5)
ggplot(weekly_hrs_activity, aes(x = week_start_date, y = hours_worked, fill = Activity)) +
geom_col() +
geom_hline(yintercept = 40, color = "gray65")
## total hours by activity
activity_hrs <-
all_weeks %>%
subset(Activity != "Not Work") %>%
dplyr::group_by(Activity) %>%
dplyr::summarize(hours_worked = n()*0.5)
ggplot(activity_hrs, aes(x = 1, y = hours_worked, fill = Activity)) +
geom_col() +
scale_y_continuous(name = "Total Hours Worked", expand = c(0, 0)) +
scale_x_discrete(name = NULL)
## typical work day
weekday_hours <-
all_weeks %>%
subset(Daytype = "work") %>%
subset(Activity != "Not Work") %>%
dplyr::group_by(Time) %>%
dplyr::summarize(hours_worked = n()*0.5)
ggplot(weekday_hours, aes(x = 1, y = Time, fill = hours_worked)) +
geom_raster()
unique(all_weeks$Time)
all_weeks$Time <- factor(all_weeks$Time, levels = unique(all_weeks$Time))
## typical work day
weekday_hours <-
all_weeks %>%
subset(Daytype = "work") %>%
subset(Activity != "Not Work") %>%
dplyr::group_by(Time) %>%
dplyr::summarize(hours_worked = n()*0.5)
ggplot(weekday_hours, aes(x = 1, y = Time, fill = hours_worked)) +
geom_raster()
ggplot(activity_hrs, aes(x = 1, y = hours_worked, fill = Activity)) +
geom_col() +
scale_y_continuous(name = "Total Hours Worked", expand = c(0, 0)) +
scale_x_discrete(name = NULL)
library(tidyverse)
